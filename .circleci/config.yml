# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  #jira: circleci/jira@2.1.0
  #newman: postman/newman@1.0.0
  node: circleci/node@5.1.0
  docker: circleci/docker@2.4.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  # This was included as an example. Left for easy references and as an example. And easy test as we resolve CircleCI tests
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  frontend-tests:
    machine:
      image: ubuntu-2204:2022.07.1

    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: npm install
          working_directory: Frontend/AcademicTool/components
      - run:
          name: Run Tests
          command: npm test
          working_directory: Frontend/AcademicTool/components

  backend-tests:
    machine:
      image: ubuntu-2204:2022.07.1

    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: npm install
          working_directory: Backend/backendAcademic
      - run:
          name: Run Tests
          command: npm test
          working_directory: Backend/backendAcademic

  build_and_push:
    docker:
      - image: cimg/node:14.17
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13

      - node/install-packages:
          pkg-manager: npm

      # Build Docker Image
      - run:
          name: Build Docker Image
          command: |
            docker build -t mccoybs/docker_assignment:$DOCKER_TAG .

      - run:
          name: Authenticate with Docker Hub
          command: |
            echo $DOCKERHUB_PASS | docker login --username mccoybs --password-stdin

      # Run tests for Docker Image after creating and authinticating
      # Front End
      - run:
          name: Install Dependencies
          command: npm install
          working_directory: Frontend/AcademicTool/components/testCases
      - run:
          name: Run Tests
          command: npm test
          working_directory: Frontend/AcademicTool/components/testCases
      # Back end
      - run:
          name: Install Dependencies
          command: npm install
          working_directory: Backend/backendAcademic
      - run:
          name: Run Tests
          command: npm test
          working_directory: Backend/backendAcademic
      
      # After testing, push an image to the Docker Hub
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            docker push mccoybs/docker_assignment:$DOCKER_TAG


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  main:
    jobs:
#      - db_tests  # Commented out as trying to test tests within respective folders
      - say-hello
      - frontend-tests
      - backend-tests

  build_and_deploy:
    jobs:
      - build_and_push:
          filters:
            branches:
              only: main

# Saving Harish's code for reference while we resolve test routing
# version: 2.1

# jobs:
#  frontend-tests:
#    machine:
#      image: ubuntu-2204:2022.07.1
#
#    steps:
#      - checkout
#      - run:
#          name: Install Dependencies
#          command: npm install
#          working_directory: Frontend/AcademicTool/components/testCases
#      - run:
#          name: Run Tests
#          command: npm test
#          working_directory: Frontend/AcademicTool/components/testCases
#
#  backend-tests:
#    machine:
#      image: ubuntu-2204:2022.07.1
#
#   steps:
#      - checkout
#      - run:
#          name: Install Dependencies
#          command: npm install
#          working_directory: Backend/backendAcademic
#      - run:
#          name: Run Tests
#          command: npm test
#          working_directory: Backend/backendAcademic
#
#
# workflows:
#  Setup_and_Test:
#    jobs:
#      - frontend-tests
#      - backend-tests
